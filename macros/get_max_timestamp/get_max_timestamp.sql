{% macro get_max_timestamp(timestamp_column='loaded_timestamp', predicate=none, warehouse_size='xs', model_name=this.name) %}
    {% set macro_ctx = dbt_macro_polo.create_macro_context('get_max_timestamp') %}
    {% set model_id = macro_ctx.model_id %}
    {% set macro_polo = var('macro_polo', {}) %}

    {# Input validation #}
    {% if not timestamp_column %}
        {{ dbt_macro_polo.logging(message="Error: timestamp_column is required", level='ERROR', model_id=model_id) }}
        {{ return(false) }}
    {% endif %}

    {% if execute %}
        {# Cache handling #}
        {% set cache_key = '_macro_polo_max_ts_' ~ model_id | replace('.', '_') ~ '_' ~ timestamp_column ~ 
            ('_' ~ predicate | replace(' ', '_') if predicate is not none else '') %}
        {% set cache_value = dbt_macro_polo.get_cache_value(cache_key) %}
    
        {% if cache_value %}
            {{ dbt_macro_polo.logging(message="Resolved maximum timestamp from cache", model_id=model_id, status=cache_value | upper) }}
            {{ return("'" ~ cache_value ~ "'::timestamp") }}
        {% endif %}

        {# Warehouse allocation and relation validation #}
        {% set warehouse = dbt_macro_polo.allocate_warehouse(warehouse_size) %}
        {% set relation = adapter.get_relation(this.database, this.schema, model_name) if model_name is not none else this %}
        
        {# Consolidated error checking #}
        {% if not warehouse %}
            {{ dbt_macro_polo.logging(message="Failed to allocate warehouse", level='ERROR', model_id=model_id) }}
            {{ return(false) }}
        {% elif not relation %}
            {{ dbt_macro_polo.logging(message="Relation not found: " ~ model_name, level='ERROR', model_id=model_id) }}
            {{ return(false) }}
        {% endif %}

        {# Execute query with proper warehouse management #}
        {% set query %}
            /* Query generated by get_max_timestamp macro */
            select coalesce(max({{ timestamp_column }}), '0'::timestamp) as max_ts
            from {{ relation }}
            {% if predicate %}where {{ predicate }}{% endif %}
        {% endset %}

        {% do run_query('use warehouse ' ~ warehouse) %}
        {% set result = run_query(query) %}
        {% do run_query('use warehouse ' ~ target.warehouse) %}

        {# Result validation and processing #}
        {% if not result %}
            {{ dbt_macro_polo.logging(message="Query execution failed", level='ERROR', model_id=model_id) }}
            {{ return(false) }}
        {% endif %}

        {% set timestamp = result.columns[0].values()[0] %}
        {% if timestamp is none %}
            {{ dbt_macro_polo.logging(message="No timestamp value returned", level='ERROR', model_id=model_id) }}
            {{ return(false) }}
        {% endif %}

        {# Cache and return result #}
        {% set timestamp_str = timestamp | string %}
        {% do macro_polo.cache.update({cache_key: timestamp_str}) %}
        {{ dbt_macro_polo.logging(message="Resolved maximum timestamp", model_id=model_id, status=timestamp_str) }}
        {{ return("'" ~ timestamp_str ~ "'::timestamp") }}
    {% endif %}
{% endmacro %}